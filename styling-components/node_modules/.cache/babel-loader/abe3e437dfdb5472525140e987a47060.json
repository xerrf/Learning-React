{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Spade\\\\Desktop\\\\LearningReact\\\\styling-components\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; // Class components\n//import React, {useState} from 'react';  // Functional components with Hooks\n\nimport './App.css';\nimport Person from './Person/Person'; //import Radium, {StyleRoot} from 'radium';\n// Class-based component\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [{\n        id: '342',\n        name: 'Bob',\n        age: 23\n      }, {\n        id: '123rj',\n        name: 'Randers',\n        age: 25\n      }, {\n        id: 'qwiu',\n        name: 'Stephanie',\n        age: 22\n      }],\n      otherState: \"Other\",\n      showPersons: false\n    };\n\n    this.nameChangeHandler = (event, id) => {\n      // Get the index of the matching id argument\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      }); // Copy the current person at the matched index to a new person object\n\n      const personUpdated = { ...this.state.persons[personIndex]\n      }; // Update the copy's name\n\n      personUpdated.name = event.target.value; // Copy the persons arrray to then swap in the updated value\n\n      const personsUpdated = [...this.state.persons];\n      personsUpdated[personIndex] = personUpdated; // Update the State array\n\n      this.setState({\n        persons: personsUpdated\n      });\n    };\n\n    this.togglePersonHandler = () => {\n      const doesShow = this.state.showPersons;\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n\n    this.deletePersonHandler = index => {\n      const p = [...this.state.persons];\n      p.splice(index, 1);\n      this.setState({\n        persons: p\n      });\n    };\n  }\n\n  render() {\n    const style = {\n      backgroundColor: 'green',\n      font: 'inherit',\n      border: 'solid blue thin',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, this.state.persons.map((person, index) => {\n        return /*#__PURE__*/React.createElement(Person, {\n          click: () => this.deletePersonHandler(index),\n          name: person.name,\n          age: person.age,\n          key: person.id,\n          changed: event => this.nameChangeHandler(event, person.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 18\n          }\n        });\n      }));\n      style.backgroundColor = 'red';\n      style[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      };\n    } // Classes\n\n\n    const classes = [];\n\n    if (this.state.persons.length <= 2) {\n      classes.push('red');\n    }\n\n    if (this.state.persons.length <= 1) {\n      classes.push('bold');\n    }\n\n    return (\n      /*#__PURE__*/\n      // <StyleRoot>\n      React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, \"Hello, I am a React app\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.join(' '),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }\n      }, \"This is really working\"), /*#__PURE__*/React.createElement(\"button\", {\n        style: style,\n        onClick: this.togglePersonHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, \"Show People\"), persons) // </StyleRoot>\n\n    );\n  }\n\n}\n\nexport default App; //export default Radium(App);","map":{"version":3,"sources":["C:/Users/Spade/Desktop/LearningReact/styling-components/src/App.js"],"names":["React","Component","Person","App","state","persons","id","name","age","otherState","showPersons","nameChangeHandler","event","personIndex","findIndex","p","personUpdated","target","value","personsUpdated","setState","togglePersonHandler","doesShow","deletePersonHandler","index","splice","render","style","backgroundColor","font","border","padding","cursor","color","map","person","classes","length","push","join"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'; // Class components\n//import React, {useState} from 'react';  // Functional components with Hooks\nimport './App.css';\nimport Person from'./Person/Person';\n//import Radium, {StyleRoot} from 'radium';\n\n// Class-based component\n\nclass App extends Component {\n  state = {\n    persons: [\n      {id: '342', name: 'Bob', age: 23},\n      {id: '123rj', name: 'Randers', age: 25},\n      {id: 'qwiu', name: 'Stephanie', age: 22}\n    ],\n    otherState: \"Other\",\n    showPersons: false\n  }\n\n  nameChangeHandler = (event, id) => {\n    // Get the index of the matching id argument\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    // Copy the current person at the matched index to a new person object\n    const personUpdated = {...this.state.persons[personIndex]};\n\n    // Update the copy's name\n    personUpdated.name = event.target.value;\n\n    // Copy the persons arrray to then swap in the updated value\n    const personsUpdated = [...this.state.persons];\n    personsUpdated[personIndex] = personUpdated;\n\n    // Update the State array\n    this.setState( {persons: personsUpdated} );\n  }\n\n  togglePersonHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  }\n\n  deletePersonHandler = (index) => {\n    const p = [...this.state.persons];\n    p.splice(index, 1);\n    this.setState({persons: p});\n  }\n\n  render() {\n\n    const style = {\n      backgroundColor: 'green',\n      font: 'inherit',\n      border: 'solid blue thin',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    let persons = null;\n    if(this.state.showPersons) {\n      persons = (\n        <div>\n        {this.state.persons.map((person, index) => {\n          return <Person \n            click={() => this.deletePersonHandler(index)}\n            name={person.name}\n            age={person.age}\n            key={person.id}\n            changed={(event) => this.nameChangeHandler(event, person.id)} />\n        })}\n        </div>\n      );\n      style.backgroundColor = 'red';\n      style[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      }\n    }\n\n    // Classes\n    const classes = [];\n    if(this.state.persons.length <= 2) {\n      classes.push('red');\n    }\n    if (this.state.persons.length <= 1) {\n      classes.push('bold');\n    }\n\n    return (\n      // <StyleRoot>\n        <div className=\"App\">\n          <h1>Hello, I am a React app</h1>\n          <p className={classes.join(' ')}>This is really working</p>\n          <button \n          style={style}\n          onClick={this.togglePersonHandler} >Show People</button>\n          {persons}\n        </div>\n      // </StyleRoot>\n    );\n  }\n}\n\nexport default App;\n//export default Radium(App);"]},"metadata":{},"sourceType":"module"}
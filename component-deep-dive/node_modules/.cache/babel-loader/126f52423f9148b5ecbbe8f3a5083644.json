{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Spade\\\\Desktop\\\\LearningReact\\\\component-deep-dive\\\\src\\\\container\\\\App.js\";\nimport React, { Component } from 'react'; // Class components\n//import React, {useState} from 'react';  // Functional components with Hooks\n\nimport styles from './App.module.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit'; // Class-based component\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      persons: [{\n        id: '342',\n        name: 'Bob',\n        age: 23\n      }, {\n        id: '123rj',\n        name: 'Randers',\n        age: 25\n      }, {\n        id: 'qwiu',\n        name: 'Stephanie',\n        age: 22\n      }],\n      otherState: \"Other\",\n      showPersons: false\n    };\n\n    this.nameChangeHandler = (event, id) => {\n      // Get the index of the matching id argument\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      }); // Copy the current person at the matched index to a new person object\n\n      const personUpdated = { ...this.state.persons[personIndex]\n      }; // Update the copy's name\n\n      personUpdated.name = event.target.value; // Copy the persons arrray to then swap in the updated value\n\n      const personsUpdated = [...this.state.persons];\n      personsUpdated[personIndex] = personUpdated; // Update the State array\n\n      this.setState({\n        persons: personsUpdated\n      });\n    };\n\n    this.togglePersonHandler = () => {\n      const doesShow = this.state.showPersons;\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n\n    this.deletePersonHandler = index => {\n      const p = [...this.state.persons];\n      p.splice(index, 1);\n      this.setState({\n        persons: p\n      });\n    };\n\n    console.log(\"[App.js] Constructor\");\n  }\n\n  static getDerivedStatFromProps(props, state) {\n    console.log('[App.js] getDerivedState()', props);\n    return state;\n  }\n\n  render() {\n    let personsComp = null;\n\n    if (this.state.showPersons) {\n      personsComp = /*#__PURE__*/React.createElement(Persons, {\n        persons: this.state.persons,\n        clicked: this.deletePersonHandler,\n        changed: this.nameChangeHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.App,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Cockpit, {\n      title: this.props.appTitle,\n      showPersons: this.state.showPersons,\n      persons: this.state.persons,\n      clicked: this.togglePersonHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), personsComp);\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount()');\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Spade/Desktop/LearningReact/component-deep-dive/src/container/App.js"],"names":["React","Component","styles","Persons","Cockpit","App","constructor","props","state","persons","id","name","age","otherState","showPersons","nameChangeHandler","event","personIndex","findIndex","p","personUpdated","target","value","personsUpdated","setState","togglePersonHandler","doesShow","deletePersonHandler","index","splice","console","log","getDerivedStatFromProps","render","personsComp","appTitle","componentDidMount"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CAAwC;AACxC;;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,OAAP,MAAoB,+BAApB,C,CAEA;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAE1BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAKnBC,KALmB,GAKX;AACNC,MAAAA,OAAO,EAAE,CACP;AAACC,QAAAA,EAAE,EAAE,KAAL;AAAYC,QAAAA,IAAI,EAAE,KAAlB;AAAyBC,QAAAA,GAAG,EAAE;AAA9B,OADO,EAEP;AAACF,QAAAA,EAAE,EAAE,OAAL;AAAcC,QAAAA,IAAI,EAAE,SAApB;AAA+BC,QAAAA,GAAG,EAAE;AAApC,OAFO,EAGP;AAACF,QAAAA,EAAE,EAAE,MAAL;AAAaC,QAAAA,IAAI,EAAE,WAAnB;AAAgCC,QAAAA,GAAG,EAAE;AAArC,OAHO,CADH;AAMNC,MAAAA,UAAU,EAAE,OANN;AAONC,MAAAA,WAAW,EAAE;AAPP,KALW;;AAAA,SAoBnBC,iBApBmB,GAoBC,CAACC,KAAD,EAAQN,EAAR,KAAe;AACjC;AACA,YAAMO,WAAW,GAAG,KAAKT,KAAL,CAAWC,OAAX,CAAmBS,SAAnB,CAA6BC,CAAC,IAAI;AACpD,eAAOA,CAAC,CAACT,EAAF,KAASA,EAAhB;AACD,OAFmB,CAApB,CAFiC,CAMjC;;AACA,YAAMU,aAAa,GAAG,EAAC,GAAG,KAAKZ,KAAL,CAAWC,OAAX,CAAmBQ,WAAnB;AAAJ,OAAtB,CAPiC,CASjC;;AACAG,MAAAA,aAAa,CAACT,IAAd,GAAqBK,KAAK,CAACK,MAAN,CAAaC,KAAlC,CAViC,CAYjC;;AACA,YAAMC,cAAc,GAAG,CAAC,GAAG,KAAKf,KAAL,CAAWC,OAAf,CAAvB;AACAc,MAAAA,cAAc,CAACN,WAAD,CAAd,GAA8BG,aAA9B,CAdiC,CAgBjC;;AACA,WAAKI,QAAL,CAAe;AAACf,QAAAA,OAAO,EAAEc;AAAV,OAAf;AACD,KAtCkB;;AAAA,SAwCnBE,mBAxCmB,GAwCG,MAAM;AAC1B,YAAMC,QAAQ,GAAG,KAAKlB,KAAL,CAAWM,WAA5B;AACA,WAAKU,QAAL,CAAc;AAACV,QAAAA,WAAW,EAAE,CAACY;AAAf,OAAd;AACD,KA3CkB;;AAAA,SA6CnBC,mBA7CmB,GA6CIC,KAAD,IAAW;AAC/B,YAAMT,CAAC,GAAG,CAAC,GAAG,KAAKX,KAAL,CAAWC,OAAf,CAAV;AACAU,MAAAA,CAAC,CAACU,MAAF,CAASD,KAAT,EAAgB,CAAhB;AACA,WAAKJ,QAAL,CAAc;AAACf,QAAAA,OAAO,EAAEU;AAAV,OAAd;AACD,KAjDkB;;AAEjBW,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;;AAYD,SAAOC,uBAAP,CAA+BzB,KAA/B,EAAsCC,KAAtC,EAA6C;AAC3CsB,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CxB,KAA1C;AACA,WAAOC,KAAP;AACD;;AAiCDyB,EAAAA,MAAM,GAAG;AAEP,QAAIC,WAAW,GAAG,IAAlB;;AAEA,QAAG,KAAK1B,KAAL,CAAWM,WAAd,EAA2B;AACzBoB,MAAAA,WAAW,gBAAG,oBAAC,OAAD;AACV,QAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWC,OADV;AAEV,QAAA,OAAO,EAAE,KAAKkB,mBAFJ;AAGV,QAAA,OAAO,EAAE,KAAKZ,iBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAd;AAID;;AAED,wBACE;AAAK,MAAA,SAAS,EAAEb,MAAM,CAACG,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AACE,MAAA,KAAK,EAAE,KAAKE,KAAL,CAAW4B,QADpB;AAEE,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWM,WAF1B;AAGE,MAAA,OAAO,EAAE,KAAKN,KAAL,CAAWC,OAHtB;AAIE,MAAA,OAAO,EAAE,KAAKgB,mBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMGS,WANH,CADF;AAUD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClBN,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;;AA9EyB;;AAiF5B,eAAe1B,GAAf","sourcesContent":["import React, {Component} from 'react'; // Class components\n//import React, {useState} from 'react';  // Functional components with Hooks\nimport styles from './App.module.css'; \nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\n\n// Class-based component\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    console.log(\"[App.js] Constructor\");\n  }\n\n  state = {\n    persons: [\n      {id: '342', name: 'Bob', age: 23},\n      {id: '123rj', name: 'Randers', age: 25},\n      {id: 'qwiu', name: 'Stephanie', age: 22}\n    ],\n    otherState: \"Other\",\n    showPersons: false\n  }\n\n  static getDerivedStatFromProps(props, state) {\n    console.log('[App.js] getDerivedState()', props);\n    return state;\n  }\n\n  nameChangeHandler = (event, id) => {\n    // Get the index of the matching id argument\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    // Copy the current person at the matched index to a new person object\n    const personUpdated = {...this.state.persons[personIndex]};\n\n    // Update the copy's name\n    personUpdated.name = event.target.value;\n\n    // Copy the persons arrray to then swap in the updated value\n    const personsUpdated = [...this.state.persons];\n    personsUpdated[personIndex] = personUpdated;\n\n    // Update the State array\n    this.setState( {persons: personsUpdated} );\n  }\n\n  togglePersonHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  }\n\n  deletePersonHandler = (index) => {\n    const p = [...this.state.persons];\n    p.splice(index, 1);\n    this.setState({persons: p});\n  }\n\n  render() {\n\n    let personsComp = null;\n\n    if(this.state.showPersons) {\n      personsComp = <Persons \n          persons={this.state.persons}\n          clicked={this.deletePersonHandler}\n          changed={this.nameChangeHandler} />;    \n    }\n\n    return (\n      <div className={styles.App}>\n        <Cockpit\n          title={this.props.appTitle}\n          showPersons={this.state.showPersons}\n          persons={this.state.persons}\n          clicked={this.togglePersonHandler} />\n        {personsComp}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount()');\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}